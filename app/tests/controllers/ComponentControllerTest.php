<?php

use Carbon\Carbon as Carbon;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-07 at 16:27:43.
 */
class ComponentControllerTest extends TestCase
{
    /**
     * @var User
     */
    protected $_user;
    protected $_date = '2012-01-01';


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        parent::setUp();
        $this->_user = User::whereUsername('test')->first();
        $this->be($this->_user);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers ComponentController::showIndex
     */
    public function testShowIndex()
    {
        Route::enableFilters();
        // this defaults to beneficiary (somehow).
        $response = $this->action('GET', 'ComponentController@showIndex');
        $view = $response->original;

        // is OK?
        $this->assertResponseOk();

        // count and compare number of beneficiaries:
        $count = DB::table('components')->whereType('beneficiary')->whereNull('parent_component_id')->whereUserId(
            $this->_user->id
        )->count();
        $this->assertCount($count, $view['objects']);

        // compare title.
        $this->assertEquals('All beneficiaries', $view['title']);

        Route::disableFilters();

    }

    /**
     * @covers ComponentController::showEmpty
     */
    public function testShowEmpty()
    {
        // do a manual count (basically the exact same query):
        $count = DB::table('transactions')->whereNotIn(
            'id', function ($query) {
                $query->select('transactions.id')->from('transactions')->leftJoin(
                    'component_transaction', 'component_transaction.transaction_id', '=', 'transactions.id'
                )->leftJoin('components', 'components.id', '=', 'component_transaction.component_id')->where(
                        'components.type', 'beneficiary'
                    );
            }
        )->orderBy('date', 'DESC')->count();

        Route::enableFilters();

        // this defaults to beneficiary (somehow).
        $response = $this->action('GET', 'ComponentController@showEmpty');
        $view = $response->original;

        // is OK?
        $this->assertResponseOk();

        // count result and compare
        $this->assertCount($count, $view['mutations']);

        // title
        $this->assertEquals('Transactions without a beneficiary', $view['title']);

        Route::disableFilters();
    }

    /**
     * @covers ComponentController::add
     */
    public function testAdd()
    {
        Route::enableFilters();

        // this defaults to beneficiary (somehow).
        $response = $this->action('GET', 'ComponentController@add');
        $view = $response->original;

        // is OK?
        $this->assertResponseOk();

        // Title
        $this->assertEquals('Add new beneficiary', $view['title']);

        // count and test parents:
        $count = DB::table('components')->where('type', 'beneficiary')->whereNull('parent_component_id')->whereUserId(
                $this->_user->id
            )->count() + 1;
        $this->assertCount($count, $view['parents']);

        // check and count prefilled array:
        $this->assertCount(3, $view['prefilled']);
        $this->assertEquals('', $view['prefilled']['name']);
        $this->assertEquals(0, $view['prefilled']['parent_component_id']);
        $this->assertFalse($view['prefilled']['reporting']);

    }

    /**
     * @covers ComponentController::postAdd
     */
    public function testPostAdd()
    {

        // count the number of beneficiaries
        $current = DB::table('components')->where('type', 'beneficiary')->whereUserId($this->_user->id)->count();

        // the data we will create a new component with:
        $data = [
            'name'                => 'New Test Beneficiary',
            'reporting'           => 0,
            'parent_component_id' => null,
        ];

        // fire!
        $this->action('POST', 'ComponentController@postAdd', $data);

        // is OK?
        $this->assertResponseStatus(302);

        // count again
        $new = DB::table('components')->where('type', 'beneficiary')->whereUserId($this->_user->id)->count();

        $this->assertSessionHas('success');
        $this->assertEquals($current + 1, $new);
        $this->assertRedirectedToAction('HomeController@showIndex');

        // delete it after the test:
        DB::table('components')->whereReporting(0)->delete();

    }

    /**
     * @covers ComponentController::edit
     */
    public function testEdit()
    {
        // find component to edit:
        $component = DB::table('components')->where('type', 'beneficiary')->whereUserId($this->_user->id)->first();

        // fire!
        $response = $this->action('get', 'ComponentController@edit', $component);
        $view = $response->original;

        // is OK?
        $this->assertResponseOk();

        // prefilled array should have five entries:
        $this->assertCount(3, $view['prefilled']);

        // prefilled array should match our account:
        $this->assertEquals(Crypt::decrypt($component->name), $view['prefilled']['name']);
        $this->assertEquals($component->parent_component_id, $view['prefilled']['parent_component_id']);
        $this->assertEquals($component->reporting, $view['prefilled']['reporting']);

        $this->assertEquals(Crypt::decrypt($component->name), $view['object']->name);
        $this->assertEquals($component->reporting, $view['object']->reporting);

        // check the title
        $this->assertEquals('Edit ' . $component->type . ' "' . Crypt::decrypt($component->name) . '"', $view['title']);
    }

    /**
     * @covers ComponentController::postEdit
     */
    public function testPostEdit()
    {
        // find account to edit:
        $component = DB::table('components')->where('type', 'beneficiary')->whereUserId($this->_user->id)->first();

        // the data to update the account with:
        $data = [
            'name'                => Str::random(16),
            'parent_component_id' => null,
            'reporting'           => 1,
        ];

        // fire the update!
        $this->call('POST', 'home/beneficiary/' . $component->id . '/edit', $data);

        // result should be OK
        $this->assertResponseStatus(302);

        // session also OK:
        $this->assertSessionHas('success');

        // account should match $data:
        $updated = DB::table('components')->whereId($component->id)->first();

        $this->assertEquals(Crypt::decrypt($updated->name), $data['name']);
        $this->assertEquals($updated->reporting, $data['reporting']);
        $this->assertEquals($updated->parent_component_id, $data['parent_component_id']);
        $this->assertRedirectedToAction('HomeController@showIndex');
    }

    /**
     * @covers  ComponentController::delete
     * @depends testPostAdd
     */
    public function testDelete()
    {
        // find an account:
        $component = DB::table('components')->where('type', 'beneficiary')->whereUserId($this->_user->id)->first();

        // fire!
        $response = $this->action('GET', 'ComponentController@delete', $component);
        $view = $response->original;

        // is OK?
        $this->assertResponseOk();

        // match account object.
        $this->assertEquals(Crypt::decrypt($component->name), $view['object']->name);
        $this->assertEquals($component->parent_component_id, $view['object']->parent_component_id);
        $this->assertEquals($component->reporting, $view['object']->reporting);

        // check title:
        $this->assertEquals(
            'Delete ' . $component->type . ' "' . Crypt::decrypt($component->name) . '"', $view['title']
        );

    }

    /**
     * @covers ComponentController::postDelete
     */
    public function testPostDelete()
    {
        // count:
        $current = DB::table('components')->whereUserId($this->_user->id)->count();

        // create a component (to delete it right after):
        $componentId = DB::table('components')->insertGetId(
            [
                'user_id'             => $this->_user->id,
                'name'                => Crypt::encrypt(Str::random(12)),
                'parent_component_id' => null,
                'type'                => 'beneficiary',
                'reporting'           => 1,
            ]
        );
        // fire!
        $this->call('POST', 'home/beneficiary/' . $componentId . '/delete');

        // inspect:
        $this->assertSessionHas('success');
        $this->assertRedirectedToAction('HomeController@showIndex');

        // count again:
        $new = DB::table('components')->whereUserId($this->_user->id)->count();

        $this->assertEquals($new, $current);
    }

    /**
     * @covers ComponentController::showOverview
     */
    public function testShowOverview()
    {
        // calculate the number of months manually.
        $now = new Carbon;
        $past = new Carbon($this->_date);
        // two because we list until the future.
        $diff = $now->diffInMonths($past) + 2;

        // find an account:
        $component = DB::table('components')->whereType('beneficiary')->whereUserId($this->_user->id)->first();

        // fire!
        $response = $this->action('GET', 'ComponentController@showOverview', $component);
        $view = $response->original;

        // is OK?
        $this->assertResponseOk();

        $this->assertCount($diff, $view['months']);
        $this->assertEquals(
            'Overview for ' . $component->type . ' "' . Crypt::decrypt($component->name) . '"', $view['title']
        );
    }

    /**
     * @covers ComponentController::showOverviewByMonth
     */
    public function testShowOverviewByMonth()
    {
        // the month we wish to see:
        $date = new Carbon;
        $date->startOfMonth();
        // find an account:
        $component = DB::table('components')->whereType('beneficiary')->whereUserId($this->_user->id)->first();

        // fire!
        $response = $this->call('GET', 'home/beneficiary/' . $component->id . '/overview/' . $date->format('Y/m'));
        $view = $response->original;

        // is OK?
        $this->assertResponseOk();

        // check the title:
        $this->assertEquals(
            'Overview for beneficiary "' . Crypt::decrypt($component->name) . '" in ' . $date->format('F Y'),
            $view['title']
        );

        // check mutations:
        $transfers = DB::table('component_transfer')->where('component_id', $component->id)
            ->leftJoin('transfers', 'transfers.id','=', 'component_transfer.transfer_id')
            ->where(DB::Raw('DATE_FORMAT(transfers.date,"%m-%Y")'),'=', $date->format('m-Y'))
            ->count();
        $transactions = DB::table('component_transaction')->where('component_id', $component->id)
            ->leftJoin('transactions', 'transactions.id','=', 'component_transaction.transaction_id')
            ->where(DB::Raw('DATE_FORMAT(transactions.date,"%m-%Y")'),'=', $date->format('m-Y'))
            ->count();
        $this->assertCount($transactions + $transfers, $view['mutations']);

        // check date
        $this->assertEquals($date->format('Y-m-d'), $view['date']->format('Y-m-d'));

        // check account object:
        $this->assertEquals(Crypt::decrypt($component->name), $view['component']->name);
        $this->assertEquals($component->reporting, $view['component']->reporting);
    }

    /**
     * @covers ComponentController::typeahead
     * @todo   Implement testTypeahead().
     */
    public function testTypeahead()
    {
        // count components
        $count = DB::table('components')->whereType('beneficiary')->whereNull('parent_component_id')->count();
        $count += DB::table('components')->whereType('beneficiary')->whereNotNull('parent_component_id')->count();

        $response = $this->action('GET', 'ComponentController@typeahead');

        $raw = $response->getContent();
        // decode JSON response:
        $json = json_decode($raw);

        // is OK?
        $this->assertResponseOk();


        $this->assertCount($count, $json); // rows and columns
    }
}
