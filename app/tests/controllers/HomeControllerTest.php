<?php

use Carbon\Carbon as Carbon;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-07 at 16:28:34.
 */
class HomeControllerTest extends TestCase
{
    /**
     * @var HomeController
     */
    protected $_user;
    protected $_date;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        parent::setUp();

        $this->_user = User::whereUsername('test')->first();
        $this->be($this->_user);

        $account = DB::table('accounts')->whereUserId($this->_user->id)->orderBy(
            'openingbalancedate', 'ASC'
        )->first();
        $this->_date = $account->openingbalancedate;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers HomeController::showIndex
     */
    public function testShowIndex()
    {
        $this->action('GET', 'HomeController@showIndex');

        // is OK?
        $this->assertResponseStatus(302);
        $this->assertRedirectedToAction('HomeController@showHome');
    }

    /**
     * @covers HomeController::showIndex
     */
    public function testShowIndexNotLoggedIn()
    {
        Auth::logout();
        $this->action('GET', 'HomeController@showIndex');

        // is OK?
        $this->assertResponseStatus(302);
        $this->assertRedirectedToAction('UserController@login');
    }

    /**
     * @covers HomeController::showHome
     * @todo   Implement testShowHome().
     */
    public function testShowHome()
    {
        // get dates:
        $date = new Carbon;
        $past = new Carbon($this->_date);
        $diff = $date->diffInMonths($past) + 2; // +2 for current.

        // fire!
        $response = $this->call('GET', 'home');
        $view = $response->original;


        // is OK?
        $this->assertResponseOk();

        // check the title
        $this->assertEquals('Home', $view['title']);

        // check the list of accounts
        $accounts = DB::table('accounts')->whereUserId($this->_user->id)->where('hidden', 0)->count();
        $this->assertCount($accounts, $view['accounts']);

        // check (and calculate?) the allowance
        $this->assertCount(4, $view['allowance']);
        $this->assertEquals(0, $view['allowance']['amount']);
        $this->assertFalse($view['allowance']['over']);
        $this->assertEquals(intval($date->format('t')), $view['allowance']['days']);

        // check and validate the predictables
        $this->assertArrayHasKey('predictables', $view);

        // check (and count) the transactions.
        $transactions = DB::table('transactions')->where(
            DB::Raw('DATE_FORMAT(`date`,"%m-%Y")'), '=', $date->format('m-Y')
        )->take(5)->count();
        $this->assertCount($transactions, $view['transactions']);

        // check (and count) the transfers
        $transfers = DB::table('transfers')->where(
            DB::Raw('DATE_FORMAT(`date`,"%m-%Y")'), '=', $date->format('m-Y')
        )->take(5)->count();
        $this->assertCount($transfers, $view['transfers']);

        // check (and count) the months (history)
        $this->assertCount($diff, $view['history']);


    }

    /**
     * @covers HomeController::showHome
     * @todo   Implement testShowHome().
     */
    public function testShowHomeWithDate()
    {
        // get dates:
        $date = new Carbon;
        $past = new Carbon($this->_date);
        $diff = $date->diffInMonths($past) + 2; // +2 for current.

        // fire!
        $response = $this->call('GET', 'home/' . $date->format('Y/m'));
        $view = $response->original;


        // is OK?
        $this->assertResponseOk();

        // check the title
        $this->assertEquals('Home', $view['title']);

        // check the list of accounts
        $accounts = DB::table('accounts')->whereUserId($this->_user->id)->where('hidden', 0)->count();
        $this->assertCount($accounts, $view['accounts']);

        // check (and calculate?) the allowance
        $this->assertCount(4, $view['allowance']);
        $this->assertEquals(0, $view['allowance']['amount']);
        $this->assertFalse($view['allowance']['over']);

        // check and validate the predictables
        $this->assertArrayHasKey('predictables', $view);

        // check (and count) the transactions.
        $transactions = DB::table('transactions')->where(
            DB::Raw('DATE_FORMAT(`date`,"%m-%Y")'), '=', $date->format('m-Y')
        )->take(5)->get();
        $this->assertCount(count($transactions), $view['transactions']);

        // check (and count) the transfers
        $transfers = DB::table('transfers')->where(
            DB::Raw('DATE_FORMAT(`date`,"%m-%Y")'), '=', $date->format('m-Y')
        )->take(5)->count();
        $this->assertCount($transfers, $view['transfers']);

        // check (and count) the months (history)
        $this->assertCount($diff, $view['history']);
    }

    /**
     * @covers HomeController::predict
     */
    public function testPredict()
    {
        $date = new Carbon;

        $data = [
            'balance'     => 200,
            'optimistic'  => 100,
            'alt1'        => 100,
            'alt2'        => 100,
            'pessimistic' => 100
        ];
        $query = http_build_query($data);



        $response = $this->call('GET', 'home/predict/' . $date->format('Y/m/d').'?'.$query);

        $view = $response->original;

        // validate date:
        $this->assertEquals($date->format('Ymd'),$view['date']->format('Ymd'));

        // validate numbers:
        $this->assertEquals($data['balance'],$view['input']['balance']);
        $this->assertEquals($data['optimistic'],$view['input']['optimistic']);
        $this->assertEquals($data['alt1'],$view['input']['alt1']);
        $this->assertEquals($data['alt2'],$view['input']['alt2']);
        $this->assertEquals($data['pessimistic'],$view['input']['pessimistic']);

    }
}
