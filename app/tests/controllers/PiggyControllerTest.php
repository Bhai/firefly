<?php

use Carbon\Carbon as Carbon;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-07 at 16:29:50.
 */
class PiggyControllerTest extends TestCase
{
    /**
     * @var User
     */
    protected $_user;
    protected $_amount = 234.56;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        parent::setUp();
        $this->_user = User::whereUsername('test')->first();
        $this->be($this->_user);
        DB::table('settings')->whereUserId($this->_user->id)->whereName('piggyAccount')->delete();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        DB::table('settings')->whereUserId($this->_user->id)->whereName('piggyAccount')->delete();
    }

    /**
     * @covers PiggyController::index
     */
    public function testIndex()
    {
        // with no setting, this should be a redirect:
        $this->action('GET', 'PiggyController@index');

        // is OK?
        $this->assertResponseStatus(302);

        // has been redirected.
        $this->assertRedirectedToRoute('piggyselect');

    }

    /**
     * @covers PiggyController::index
     */
    public function testIndexWithSetting()
    {
        $this->_createPiggySetting();

        // with a setting, this should be a page
        $response = $this->action('GET', 'PiggyController@index');
        $view = $response->original;

        // is OK?
        $this->assertResponseOk();


        // total target is the sum of all piggies target
        $target = DB::table('piggybanks')->whereUserId($this->_user->id)->sum('target');
        $this->assertEquals($target, $view['totalTarget']);

        // left to divide equals the balance of the account minus the content of the piggies.
        $account = DB::table('accounts')->whereUserId($this->_user->id)->first();
        $account = Account::find($account->id);
        $balance = $account->balanceOnDate(new Carbon);
        $divided = $balance - DB::table('piggybanks')->whereUserId($this->_user->id)->sum('amount');
        $this->assertEquals($divided, $view['balance']);

        // there are as many piggies as must be
        $count = DB::table('piggybanks')->whereUserId($this->_user->id)->count();
        $this->assertCount($count, $view['piggies']);

        // pigwidth is correct
        $this->assertEquals(PiggyController::$pigHeight, $view['pigHeight']);

        // pigheight is correct
        $this->assertEquals(PiggyController::$pigWidth, $view['pigWidth']);

    }

    /**
     * @covers PiggyController::add
     */
    public function testAdd()
    {
        $this->_createPiggySetting();

        // with a setting, this should be a page
        $response = $this->action('GET', 'PiggyController@add');
        $view = $response->original;

        // is OK?
        $this->assertResponseOk();

        // prefilled should have four entries:
        $this->assertCount(4, $view['prefilled']);

        // validate title:
        $this->assertEquals('Add new piggy bank', $view['title']);

    }

    /**
     * @covers PiggyController::add
     */
    public function testAddFromOldInput()
    {
        $this->_createPiggySetting();

        // array with old input:
        $data = [
            'name'   => Str::random(16),
            'target' => 300,
            'amount' => 100,
        ];
        $this->session(['_old_input' => $data]);

        $response = $this->action('GET', 'PiggyController@add');
        $view = $response->original;

        // is OK?
        $this->assertResponseOk();

        // prefilled should have four entries:
        $this->assertCount(4, $view['prefilled']);

        // prefilled must match $data
        $this->assertEquals($data['name'], $view['prefilled']['name']);
        $this->assertEquals($data['target'], $view['prefilled']['target']);
        $this->assertEquals($data['amount'], $view['prefilled']['amount']);
        // validate title:
        $this->assertEquals('Add new piggy bank', $view['title']);

    }

    /**
     * @covers PiggyController::add
     */
    public function testAddWithoutSetting()
    {
        // with no setting, this should be a redirect:
        $this->action('GET', 'PiggyController@add');

        // is OK?
        $this->assertResponseStatus(302);

        // has been redirected.
        $this->assertRedirectedToRoute('piggyselect');
    }

    /**
     * @covers PiggyController::postAdd
     */
    public function testPostAdd()
    {
        $this->_createPiggySetting();

        // array with input:
        $data = [
            'name'   => Str::random(16),
            'target' => $this->_amount,
        ];

        // count:
        $count = DB::table('piggybanks')->whereUserId($this->_user->id)->count();

        // fire!
        $this->action('POST', 'PiggyController@postAdd', $data);

        // is OK?
        $this->assertResponseStatus(302);

        // recount:
        $recount = DB::table('piggybanks')->whereUserId($this->_user->id)->count();
        $this->assertEquals($count + 1, $recount);
        $this->assertSessionHas('success');
        $this->assertRedirectedToRoute('index');

        DB::table('piggybanks')->where('amount', 0)->where('target', $this->_amount)->where('user_id', $this->_user->id)
            ->delete();
    }

    /**
     * @covers PiggyController::postAdd
     */
    public function testPostAddNoSetting()
    {
        // with no setting, this should be a redirect:
        $this->action('POST', 'PiggyController@postAdd');

        // is OK?
        $this->assertResponseStatus(302);

        // has been redirected.
        $this->assertRedirectedToRoute('piggyselect');
    }

    /**
     * @covers PiggyController::postAdd
     */
    public function testPostAddValidatorFails()
    {
        $this->_createPiggySetting();

        // array with input:
        $data = [
            'name'   => null,
            'target' => $this->_amount,
        ];

        // count:
        $count = DB::table('piggybanks')->whereUserId($this->_user->id)->count();

        // fire!
        $this->action('POST', 'PiggyController@postAdd', $data);

        // is OK?
        $this->assertResponseStatus(302);

        // recount:
        $recount = DB::table('piggybanks')->whereUserId($this->_user->id)->count();
        $this->assertEquals($count, $recount);
        $this->assertSessionHas('error');
        $this->assertRedirectedToRoute('addpiggybank');

    }

    /**
     * @covers PiggyController::postAdd
     */
    public function testPostAddTriggerFails()
    {
        $this->_createPiggySetting();

        // find a piggy, steal its name
        $piggy = DB::table('piggybanks')->whereUserId($this->_user->id)->first();

        // array with input:
        $data = [
            'name'   => Crypt::decrypt($piggy->name),
            'target' => $this->_amount,
        ];

        // count:
        $count = DB::table('piggybanks')->whereUserId($this->_user->id)->count();

        // fire!
        $this->action('POST', 'PiggyController@postAdd', $data);

        // is OK?
        $this->assertResponseStatus(302);

        // recount:
        $recount = DB::table('piggybanks')->whereUserId($this->_user->id)->count();
        $this->assertEquals($count, $recount);
        $this->assertSessionHas('error');
        $this->assertRedirectedToRoute('addpiggybank');
    }

    /**
     * @covers PiggyController::delete
     */
    public function testDelete()
    {
        $this->_createPiggySetting();

        // find a piggy to delete:
        $piggy = DB::table('piggybanks')->whereUserId($this->_user->id)->first();

        // load page
        $response = $this->action('GET', 'PiggyController@delete', $piggy);
        $view = $response->original;

        // is OK?
        $this->assertResponseOk();

        // piggy matches
        $this->assertEquals($piggy->id, $view['piggy']->id);

        // title matches
        $this->assertEquals('Delete piggy bank ' . Crypt::decrypt($piggy->name), $view['title']);
    }

    /**
     * @covers PiggyController::delete
     */
    public function testDeleteNoSetting()
    {
        // find a piggy to delete:
        $piggy = DB::table('piggybanks')->whereUserId($this->_user->id)->first();

        // with no setting, this should be a redirect:
        $this->action('GET', 'PiggyController@delete', $piggy);

        // is OK?
        $this->assertResponseStatus(302);

        // has been redirected.
        $this->assertRedirectedToRoute('piggyselect');
    }

    /**
     * @covers PiggyController::postDelete
     */
    public function testPostDelete()
    {
        $this->_createPiggySetting();

        // create a piggy
        $id = DB::table('piggybanks')->insertGetId(
            [
                'name'    => Crypt::encrypt(Str::random(16)),
                'amount'  => 100,
                'target'  => 100,
                'user_id' => $this->_user->id,
                'order' => 10
            ]
        );
        $piggy = DB::table('piggybanks')->find($id);

        // count
        $count = DB::table('piggybanks')->whereUserId($this->_user->id)->count();

        // delete it:
        $this->action('POST', 'PiggyController@postDelete', $piggy);

        // is OK?
        $this->assertResponseStatus(302);

        // recount
        $recount = DB::table('piggybanks')->whereUserId($this->_user->id)->count();

        // test
        $this->assertEquals($count - 1, $recount);
        $this->assertSessionHas('success');
        $this->assertRedirectedToRoute('index');
        $this->assertNull(DB::table('piggybanks')->find($id));


    }

    /**
     * @covers PiggyController::postDelete
     */
    public function testPostDeleteNoSetting()
    {
        // find a piggy to delete:
        $piggy = DB::table('piggybanks')->whereUserId($this->_user->id)->first();

        // with no setting, this should be a redirect:
        $this->action('POST', 'PiggyController@postDelete', $piggy);

        // is OK?
        $this->assertResponseStatus(302);

        // has been redirected.
        $this->assertRedirectedToRoute('piggyselect');
    }

    /**
     * @covers PiggyController::selectAccount
     */
    public function testSelectAccount()
    {
        // grab the page:
        $response = $this->action('GET', 'PiggyController@selectAccount');
        $view = $response->original;

        // is OK?
        $this->assertResponseOk();

        // match title
        $this->assertEquals('Piggy banks', $view['title']);

        // match number of accounts:
        $count = DB::table('accounts')->where('hidden', 0)->count();
        $this->assertCount($count, $view['accounts']);

    }

    /**
     * @covers PiggyController::postSelectAccount
     */
    public function testPostSelectAccount()
    {
        // account to select:
        $account = DB::table('accounts')->whereUserId($this->_user->id)->first();

        $this->action('POST', 'PiggyController@postSelectAccount', array('account' => $account->id));

        // is OK?
        $this->assertResponseStatus(302);

        // route OK?
        $this->assertRedirectedToRoute('piggy');

        // setting saved?
        $setting = DB::table('settings')->whereUserId($this->_user->id)->whereName('piggyAccount')->first();
        $this->assertEquals($setting->value, $account->id);
    }

    /**
     * @covers PiggyController::postSelectAccount
     */
    public function testPostSelectAccountInvalidAccount()
    {
        $this->action('POST', 'PiggyController@postSelectAccount', array('account' => -1));

        // is OK?
        $this->assertResponseStatus(302);

        // route OK?
        $this->assertRedirectedToRoute('piggyselect');

        // setting saved?
        $setting = DB::table('settings')->whereUserId($this->_user->id)->whereName('piggyAccount')->first();
        $this->assertEquals(0, $setting->value);


    }

    /**
     * @covers PiggyController::edit
     */
    public function testEdit()
    {
        $this->_createPiggySetting();

        // find a piggy to edit:
        $piggy = DB::table('piggybanks')->whereUserId($this->_user->id)->first();

        // go!
        $response = $this->action('GET', 'PiggyController@edit', $piggy);
        $view = $response->original;

        // is OK?
        $this->assertResponseOk();

        // does the pig match?
        $this->assertEquals($piggy->id, $view['pig']->id);

        // does the title match?
        $this->assertEquals('Edit piggy bank "' . Crypt::decrypt($piggy->name) . '"', $view['title']);

        // is prefilled filled?
        $this->assertCount(4, $view['prefilled']);

        // is prefilled matching?
        $this->assertEquals(Crypt::decrypt($piggy->name), $view['prefilled']['name']);


    }

    /**
     * @covers PiggyController::edit
     */
    public function testEditWithOldInput()
    {
        $this->_createPiggySetting();

        // array with old input:
        $data = [
            'name'   => Str::random(16),
            'target' => 300,
            'amount' => 100,
        ];
        $this->session(['_old_input' => $data]);

        // find a piggy to edit:
        $piggy = DB::table('piggybanks')->whereUserId($this->_user->id)->first();

        // go!
        $response = $this->action('GET', 'PiggyController@edit', $piggy);
        $view = $response->original;

        // is OK?
        $this->assertResponseOk();

        // does the pig match?
        $this->assertEquals($piggy->id, $view['pig']->id);

        // does the title match?
        $this->assertEquals('Edit piggy bank "' . Crypt::decrypt($piggy->name) . '"', $view['title']);

        // is prefilled filled?
        $this->assertCount(4, $view['prefilled']);

        // is prefilled matching?
        $this->assertEquals($data['name'], $view['prefilled']['name']);

    }


    /**
     * @covers PiggyController::edit
     */
    public function testEditNoSetting()
    {
        // find a piggy to edit:
        $piggy = DB::table('piggybanks')->whereUserId($this->_user->id)->first();

        // with no setting, this should be a redirect:
        $this->action('GET', 'PiggyController@edit', $piggy);

        // is OK?
        $this->assertResponseStatus(302);

        // has been redirected.
        $this->assertRedirectedToRoute('piggyselect');
    }

    /**
     * @covers PiggyController::postEdit
     */
    public function testPostEdit()
    {
        $this->_createPiggySetting();

        // find piggy to edit:
        $piggy = DB::table('piggybanks')->whereUserId($this->_user->id)->first();

        // the data to update the piggy with:
        $data = [
            'name'   => Str::random(16),
            'target' => 200,
            'amount' => 100,
        ];

        // fire the update!
        $this->call('POST', 'home/piggy/edit/' . $piggy->id, $data);

        // result should be OK
        $this->assertResponseStatus(302);

        // session also OK:
        $this->assertSessionHas('success');

        // account should match $data:
        $updated = DB::table('piggybanks')->whereId($piggy->id)->first();

        $this->assertEquals(Crypt::decrypt($updated->name), $data['name']);
        $this->assertEquals($updated->target, $data['target']);
        $this->assertEquals($updated->amount, $data['amount']);
        $this->assertRedirectedToAction('HomeController@showIndex');


    }

    /**
     * @covers PiggyController::postEdit
     */
    public function testPostEditFailValidator()
    {
        $this->_createPiggySetting();

        // find piggy to edit:
        $piggy = DB::table('piggybanks')->whereUserId($this->_user->id)->first();

        // the data to update the piggy with:
        $data = [
            'name'   => NULL,
            'target' => 200,
            'amount' => 100,
        ];

        // fire the update!
        $this->call('POST', 'home/piggy/edit/' . $piggy->id, $data);

        // result should be OK
        $this->assertResponseStatus(302);

        // session also error:
        $this->assertSessionHas('error');

        // back to edit page
        $this->assertRedirectedToRoute('editpiggy',$piggy->id);


    }

    /**
     * @covers PiggyController::postEdit
     */
    public function testPostEditNoSetting()
    {
        // find a piggy to edit:
        $piggy = DB::table('piggybanks')->whereUserId($this->_user->id)->first();

        // with no setting, this should be a redirect:
        $this->action('POST', 'PiggyController@edit', $piggy);

        // is OK?
        $this->assertResponseStatus(302);

        // has been redirected.
        $this->assertRedirectedToRoute('piggyselect');

    }

    /**
     * @covers PiggyController::updateAmount
     */
    public function testUpdateAmount()
    {
        $this->_createPiggySetting();

        // find a piggy to edit:
        $piggy = DB::table('piggybanks')->whereUserId($this->_user->id)->first();

        // get the account of the setting:
        $account = Account::whereUserId($this->_user->id)->first();
        $balance = $account->balanceOnDate(new Carbon);

        // get the page:
        $response = $this->action('GET', 'PiggyController@updateAmount', $piggy);
        $view = $response->original;

        // is OK?
        $this->assertResponseOk();

        // compare pig
        $this->assertEquals($piggy->id, $view['pig']['id']);

        // compare balance
        $balance -= 100; // DONT KNOW
        $this->assertEquals(floatval($balance), floatval($view['balance']));

    }

    /**
     * @covers PiggyController::updateAmount
     */
    public function testUpdateAmountNoSetting()
    {
        // find a piggy to update the amount:
        $piggy = DB::table('piggybanks')->whereUserId($this->_user->id)->first();

        // with no setting, this should be a redirect:
        $this->action('GET', 'PiggyController@updateAmount', $piggy);

        // is OK?
        $this->assertResponseStatus(302);

        // has been redirected.
        $this->assertRedirectedToRoute('piggyselect');

    }

    /**
     * @covers PiggyController::postUpdateAmount
     */
    public function testPostUpdateAmount()
    {
        $this->_createPiggySetting();

        // find a piggy to edit:
        $piggy = DB::table('piggybanks')->whereUserId($this->_user->id)->first();

        $data = [
            'amount' => 20
        ];


        // get the page:
        //http://geld.nder.dev/home/piggy/amount/20
        $this->call('POST', 'home/piggy/amount/' . $piggy->id, $data);

        // is OK?
        $this->assertResponseStatus(302);

        // compare updated pig
        $newPig = DB::table('piggybanks')->find($piggy->id);

        $this->assertSessionHas('success');
        $this->assertEquals($piggy->amount + $data['amount'], $newPig->amount);
    }

    /**
     * @covers PiggyController::postUpdateAmount
     * @todo   Implement testPostUpdateAmountNoSetting().
     */
    public function testPostUpdateAmountNoSetting()
    {
        // find a piggy to update the amount:
        $piggy = DB::table('piggybanks')->whereUserId($this->_user->id)->first();

        // with no setting, this should be a redirect:
        $this->action('POST', 'PiggyController@updateAmount', $piggy);

        // is OK?
        $this->assertResponseStatus(302);

        // has been redirected.
        $this->assertRedirectedToRoute('piggyselect');
    }

    private function _createPiggySetting()
    {
        $r = DB::table('settings')->insert(
            [
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s'),
                'user_id'    => $this->_user->id,
                'type'       => 'int',
                'name'       => 'piggyAccount',
                'date'       => null,
                'value'      => DB::table('accounts')->whereUserId($this->_user->id)->first()->id
            ]
        );
    }
}
