<?php

use Carbon\Carbon as Carbon;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-07 at 16:29:09.
 */
class LimitControllerTest extends TestCase
{
    /**
     * @var User
     */
    protected $_user;
    protected $_amount = 234.56;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        parent::setUp();
        $this->_user = User::whereUsername('test')->first();
        $this->be($this->_user);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers LimitController::addLimit
     */
    public function testAddLimit()
    {
        Route::enableFilters();
        // find component to work with:
        $component = DB::table('components')->whereUserId($this->_user->id)->first();

        // date:
        $date = new Carbon;
        $date->firstOfMonth();

        // get the page!
        $response = $this->call(
            'get', 'home/' . $component->type . '/limit/add/' . $component->id . '/' . $date->format('Y/m')
        );
        $view = $response->original;

        // result should be OK
        $this->assertResponseOk();

        // view should contain component:
        $this->assertEquals(Crypt::decrypt($component->name), $view['object']['name']);

        // view should contain date
        $this->assertEquals($date->format('Ymd'), $view['date']->format('Ymd'));

        Route::disableFilters();

    }

    /**
     * @covers LimitController::postAddLimit
     */
    public function testPostAddLimit()
    {
        // find component to work with:
        $component = DB::table('components')->whereUserId($this->_user->id)->first();

        // count current number of limits:
        $count = DB::table('limits')->whereComponentId($component->id)->count();

        // date:
        $date = new Carbon;
        $date->firstOfMonth();

        // data:
        $data = [
            'amount' => $this->_amount
        ];

        // get the page!
        $this->call(
            'post', 'home/' . $component->type . '/limit/add/' . $component->id . '/' . $date->format('Y/m'), $data
        );

        // response is OK
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');

        // new count!
        $updated = DB::table('limits')->whereComponentId($component->id)->count();
        $this->assertEquals($count + 1, $updated);

        $this->assertRedirectedToAction('HomeController@showIndex');


    }

    /**
     * @covers LimitController::postAddLimit
     */
    public function testPostAddLimitFailsValidation()
    {
        // find component to work with:
        $component = DB::table('components')->whereUserId($this->_user->id)->first();

        // count current number of limits:
        $count = DB::table('limits')->whereComponentId($component->id)->count();

        // date:
        $date = new Carbon;
        $date->firstOfMonth();

        // data:
        $data = [
            'amount' => null
        ];

        // get the page!
        $this->call(
            'post', 'home/' . $component->type . '/limit/add/' . $component->id . '/' . $date->format('Y/m'), $data
        );

        // response is OK
        $this->assertResponseStatus(302);
        $this->assertSessionHas('error');

        // new count!
        $updated = DB::table('limits')->whereComponentId($component->id)->count();
        $this->assertEquals($count, $updated);

        // TODO limit and beneficiarycontroller must catch obj better.
        $this->assertRedirectedTo('home/beneficiary/' . $component->id . '/overview');
    }

    /**
     * @covers LimitController::postAddLimit
     */
    public function testPostAddLimitFailsTrigger()
    {
        // find a limit to duplicate:
        $limit = DB::table('limits')->first();

        // find its component (to work with):
        $component = DB::table('components')->whereId($limit->component_id)->first();

        // count current number of limits:
        $count = DB::table('limits')->whereComponentId($component->id)->count();


        // date:
        $date = new Carbon($limit->date);
        $date->firstOfMonth();

        // data:
        $data = [
            'amount' => $limit->amount
        ];

        // get the page!
        $this->call(
            'post', 'home/' . $component->type . '/limit/add/' . $component->id . '/' . $date->format('Y/m'), $data
        );

        // response is OK
        $this->assertResponseStatus(302);
        $this->assertSessionHas('error');

        // new count!
        $updated = DB::table('limits')->whereComponentId($component->id)->count();
        $this->assertEquals($count, $updated);

        // TODO limit and beneficiarycontroller must catch obj better.
        $this->assertRedirectedTo('home/beneficiary/' . $component->id . '/overview');
    }

    /**
     * @covers LimitController::editLimit
     */
    public function testEditLimit()
    {
        // find a limit (belonging to the current user)
        $limit = DB::table('limits')->leftJoin('components', 'components.id', '=', 'limits.component_id')->where(
            'components.user_id', '=', $this->_user->id
        )->first(['limits.*', 'components.id as compId']);


        $response = $this->action('get', 'LimitController@editLimit', $limit);
        $view = $response->original;

        // result should be OK
        $this->assertResponseOk();

        // validate if limit matches:
        $this->assertEquals($limit->id, $view['limit']->id);
        $this->assertEquals($limit->amount, $view['limit']->amount);
        $this->assertEquals($limit->date, $view['limit']->date->format('Y-m-d'));

        // validate if component id matches
        $this->assertEquals($limit->compId, $view['object']->id);

    }

    /**
     * @covers LimitController::postEditLimit
     */
    public function testPostEditLimit()
    {
        // find a limit (belonging to the current user)
        $limit = DB::table('limits')->leftJoin('components', 'components.id', '=', 'limits.component_id')->where(
            'components.user_id', '=', $this->_user->id
        )->first(['limits.*', 'components.id as compId', 'components.type as compType']);

        // input for this limit:
        $data = [
            'amount' => $limit->amount * 2
        ];

        // get the page!
        $this->call('post', 'home/' . $limit->compType . '/limit/edit/' . $limit->id, $data);

        // response is OK
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');

        // find new limit:
        $newLimit = DB::table('limits')->whereId($limit->id)->first();

        // compare with input:
        $this->assertEquals($data['amount'], $newLimit->amount);

        // validate session:

        $this->assertRedirectedToAction('HomeController@showIndex');


        // reset amounts.
        DB::table('limits')->where('amount', '!=', $this->_amount)->update(['amount' => 100]);
    }

    /**
     * @covers LimitController::postEditLimit
     */
    public function testPostEditLimitFailedValidator()
    {
        // find a limit (belonging to the current user)
        $limit = DB::table('limits')->leftJoin('components', 'components.id', '=', 'limits.component_id')->where(
            'components.user_id', '=', $this->_user->id
        )->first(['limits.*', 'components.id as compId', 'components.type as compType']);

        // input for this limit:
        $data = [
            'amount' => null
        ];

        // get the page!
        $this->call('post', 'home/' . $limit->compType . '/limit/edit/' . $limit->id, $data);

        // response is OK
        $this->assertResponseStatus(302);
        $this->assertSessionHas('error');

        // find new limit:
        $newLimit = DB::table('limits')->whereId($limit->id)->first();

        // make sure limit is not changed.
        $this->assertEquals($limit->amount, $newLimit->amount);

        // validate session:
        // TODO limit and beneficiarycontroller must catch obj better.
        $this->assertRedirectedTo('home/beneficiary/' . $limit->compId . '/overview');

    }

    /**
     * @covers LimitController::deleteLimit
     */
    public function testDeleteLimit()
    {
        // find a limit (belonging to the current user)
        $limit = DB::table('limits')->leftJoin('components', 'components.id', '=', 'limits.component_id')->where(
            'components.user_id', '=', $this->_user->id
        )->first(['limits.*', 'components.id as compId']);


        $response = $this->action('get', 'LimitController@deleteLimit', $limit);
        $view = $response->original;

        // result should be OK
        $this->assertResponseOk();

        // component ID should match
        $this->assertEquals($limit->compId, $view['object']->id);

        // limit's date should match
        $this->assertEquals($limit->date, $view['date']->format('Y-m-d'));

    }


    /**
     * @covers  LimitController::postDeleteLimit
     * @depends testPostAddLimit
     */
    public function testPostDeleteLimit()
    {
        // get a limit to delete
        $limit = DB::table('limits')->where('amount', $this->_amount)->first();
        // get the component:
        $component = DB::table('components')->find($limit->component_id);

        // delete it.
        $this->call('post', 'home/' . $component->type . '/limit/delete/' . $limit->id);

        // verify status:
        $this->assertResponseStatus(302);

        // verify session
        $this->assertSessionHas('success');

        // verify redirect
        $this->assertRedirectedToAction('HomeController@showIndex');
    }
}
