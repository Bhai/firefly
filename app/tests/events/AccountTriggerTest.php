<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-07 at 16:52:52.
 */
class AccountTriggerTest extends TestCase
{
    /**
     * @var AccountTrigger
     */
    protected $object;

    /**
     * @var User
     */
    protected $_user;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        parent::setUp();
        $this->_user = User::whereUsername('test')->first();
        $this->be($this->_user);
        $this->object = new AccountTrigger;

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers AccountTrigger::editAccount
     */
    public function testEditAccount()
    {
        $account = Account::whereUserId($this->_user->id)->first();
        // edit some stuff, then trigger:
        $this->object->editAccount($account);
    }

    /**
     * @covers AccountTrigger::editAccount
     */
    public function testEditAccountDateToFuture()
    {
        $account = Account::whereUserId($this->_user->id)->first();
        // edit some stuff, then trigger:
        $account->openingbalancedate->addDays(5);
        $this->object->editAccount($account);
    }

    /**
     * @covers AccountTrigger::editAccount
     */
    public function testEditAccountDateToPast()
    {
        $account = Account::whereUserId($this->_user->id)->first();
        // edit some stuff, then trigger:
        $date = clone $account->openingbalancedate;
        $date->subDays(5);
        $account->openingbalancedate = $date->format('Y-m-d');
        $this->object->editAccount($account);
    }



    /**
     * @covers AccountTrigger::editAccount
     */
    public function testEditAccountAmountChanged()
    {
        $account = Account::whereUserId($this->_user->id)->first();
        // edit some stuff, then trigger:
        $this->object->editAccount($account);
    }


    /**
     * @covers AccountTrigger::createAccount
     */
    public function testCreateAccount()
    {
        $account = Account::whereUserId($this->_user->id)->first();
        $this->object->createAccount($account);
    }

    /**
     * @covers AccountTrigger::validateAccountName
     */
    public function testValidateAccountName()
    {
    }

    /**
     * @covers AccountTrigger::subscribe
     */
    public function testSubscribe()
    {
    }
}
